name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python test_ci.py
      env:
        PYTHONPATH: ${{ github.workspace }}

  deploy-prod:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible
    
    - name: Bump Production Version
      run: |
        # Get current prod version
        CURRENT_VERSION=$(cat version.prod.txt)
        echo "Current prod version: $CURRENT_VERSION"
        
        # Extract version parts
        if [[ $CURRENT_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          MAJOR=${BASH_REMATCH[1]}
          MINOR=${BASH_REMATCH[2]}
          PATCH=${BASH_REMATCH[3]}
          
          # Increment patch version for production
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
        else
          # Fallback if format doesn't match
          NEW_VERSION="1.0.0"
        fi
        
        echo "New prod version: $NEW_VERSION"
        
        # Update version files
        echo "$NEW_VERSION" > version.prod.txt
        echo "$NEW_VERSION" > version.txt
        
        # Set version as environment variable for Ansible
        echo "DEPLOY_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        
        # Commit version changes
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add version.prod.txt version.txt
        git commit -m "Bump prod version to $NEW_VERSION [skip ci]" || echo "No changes to commit"
        git push

    - name: Deploy to Production
      env:
        ANSIBLE_HOST_KEY_CHECKING: False
        VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "Debug: VAULT_PASSWORD length: ${#VAULT_PASSWORD}"
        echo "Debug: VAULT_PASSWORD starts with: ${VAULT_PASSWORD:0:10}..."
        echo "$VAULT_PASSWORD" > vault_pass.txt
        echo "Debug: vault_pass.txt contents:"
        cat vault_pass.txt
        echo "$SSH_PRIVATE_KEY" > ssh_key
        chmod 600 ssh_key
        echo "Debug: SSH key file contents (first 50 chars):"
        head -c 50 ssh_key
        echo ""
        echo "Debug: SSH key file size:"
        wc -c ssh_key
        echo "Debug: SSH key file permissions:"
        ls -la ssh_key
        echo "Running Ansible playbook..."
        ansible-playbook \
          --vault-password-file vault_pass.txt \
          -u ansible \
          --private-key ssh_key \
          -i ansible/inventory.yml \
          -e "deploy_path=/opt/hampuff-sms" \
          -e "app_environment=production" \
          -v \
          ansible/main.yml
        
        # Ensure service is restarted and systemd is reloaded
        echo "Restarting service and reloading systemd..."
        ansible all \
          --vault-password-file vault_pass.txt \
          -u ansible \
          --private-key ssh_key \
          -i ansible/inventory.yml \
          -m systemd \
          -a "name=hampuff-sms-prod state=restarted daemon_reload=yes"
        
        # Verify deployment
        echo "Verifying deployment..."
        ansible all \
          --vault-password-file vault_pass.txt \
          -u ansible \
          --private-key ssh_key \
          -i ansible/inventory.yml \
          -m uri \
          -a "url=http://127.0.0.1:15015/health return_content=yes"
        
        rm vault_pass.txt ssh_key
